// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZaalVpn.API;

#nullable disable

namespace ZaalVpn.API.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("auth")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ZaalVpn.API.Entities.ConfigEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("tbConfigs", "vpn");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.CountryEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbCountries", "vpn");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.GenderEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbGenders", "auth");

                    b.HasData(
                        new
                        {
                            Id = "1ad5a945d7904c609b5c12ffecd69c3b",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8596),
                            Gender = "Male"
                        },
                        new
                        {
                            Id = "1cbd9eb4cf61422cbdfdde046471ef6b",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8659),
                            Gender = "Female"
                        },
                        new
                        {
                            Id = "c52dc6e878ec41d989ffdaa1a74e310a",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8676),
                            Gender = "NonBinary"
                        },
                        new
                        {
                            Id = "a93641c818ea41bc96ca07318d5a7204",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8688),
                            Gender = "Bigender"
                        },
                        new
                        {
                            Id = "5f05feca029045e2827109cd8720e18e",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8700),
                            Gender = "Agender"
                        },
                        new
                        {
                            Id = "831900da22ed420a85fcc7a50a463473",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8723),
                            Gender = "Feminine"
                        },
                        new
                        {
                            Id = "670b3bf1ceb94eb992a85c199d3aeabe",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8748),
                            Gender = "Androgynous"
                        },
                        new
                        {
                            Id = "a3c58dc9b2184bf89041ea3a870eaf4d",
                            CreateTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(8760),
                            Gender = "Other"
                        });
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.RoleApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("tbRoles", "auth");

                    b.HasData(
                        new
                        {
                            Id = "2e0fdd41-e6ce-48f5-b614-30b3fdaccc4f",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "9070aa08-14de-4ca1-9d83-ceb6f9be6a27",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.RoleClaimApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("tbRoleClaims", "auth");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.ServerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tbServers", "vpn");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTimeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastOnlineAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("tbUsers", "auth");

                    b.HasData(
                        new
                        {
                            Id = "ebae9dc1-6b62-407e-8a70-ab8da1e39257",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3631fded-e45b-4576-84a4-470f9fee60c3",
                            CreationTimeAt = new DateTime(2025, 3, 15, 14, 13, 17, 849, DateTimeKind.Local).AddTicks(9917),
                            Email = "brok@gmail.com",
                            EmailConfirmed = true,
                            GenderId = "1ad5a945d7904c609b5c12ffecd69c3b",
                            LastOnlineAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMKrGYCR2qyGSZAXCEvmdz8vhdq5SqGPuX3tghdYF7vbjoeI1o35Koc/0waf1SFEOQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e05f6f3f-3073-4dc8-81f6-4258a3f8662e",
                            ShortId = "111111",
                            TwoFactorEnabled = false,
                            UserName = "brok"
                        });
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserClaimApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tbUserClaim", "auth");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserLoginApplication", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("tbUserLogins", "auth");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserRoleApplication", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbUserRoles", "auth");

                    b.HasData(
                        new
                        {
                            UserId = "ebae9dc1-6b62-407e-8a70-ab8da1e39257",
                            RoleId = "2e0fdd41-e6ce-48f5-b614-30b3fdaccc4f"
                        },
                        new
                        {
                            UserId = "ebae9dc1-6b62-407e-8a70-ab8da1e39257",
                            RoleId = "9070aa08-14de-4ca1-9d83-ceb6f9be6a27"
                        });
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserTokenApplication", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("tbUserTokens", "auth");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.ConfigEntity", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.ServerEntity", "Server")
                        .WithMany("Configs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.RoleClaimApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.RoleApplication", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.ServerEntity", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.CountryEntity", "Country")
                        .WithMany("Servers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.GenderEntity", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserClaimApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.UserApplication", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserLoginApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.UserApplication", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserRoleApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.RoleApplication", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZaalVpn.API.Entities.UserApplication", "User")
                        .WithMany("Role")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserTokenApplication", b =>
                {
                    b.HasOne("ZaalVpn.API.Entities.UserApplication", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.CountryEntity", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.RoleApplication", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.ServerEntity", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("ZaalVpn.API.Entities.UserApplication", b =>
                {
                    b.Navigation("Role");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
